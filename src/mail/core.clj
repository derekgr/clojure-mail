(ns mail.core)

;; The entity that gets generated by sources and consumed by sinks.
(defrecord Message 
  [id, subject, from, to, body, content-type]) 

(defprotocol Source
  "A source is a logical integer-ordered collection of email messages."
  (message-at [x i] "Returns the Message at position i."))

(defprotocol Sink
  "A Sink can 'store' message records for your definition of store."
  (write [x message])
  (flush-messages [x]))

(defn copy-messages 
  "Send the sequence of messages to the sink."
  [s sink]
  (dorun (map #(.write sink %) s))
  (.flush-messages sink))

(defn copy-all-messages [source sink]
  (copy-messages (seq source) sink))

(defn source-range [source s] 
  (map #(nth source %) s)) 

(defn copy-range [source sink s]
  (copy-messages (source-range source s) sink))

(defn- consume [queue-ref] 
  (dosync
    (when-let [[h & t] @queue-ref]
      (ref-set queue-ref t)
      h)))

(defn copy-until-empty [[source sink] queue-ref]
  (let [h (consume queue-ref)]
    (loop [item h]
      (when item
        (.write sink (.message-at source item))
        (recur (consume queue-ref))))))

(defn parallel-copy [source-fn sink-fn s threads]
  (let [queue (ref s)
        agents (map (fn [i] (agent [(source-fn) (sink-fn)])) (range 0 threads))]
    (dorun (map #(send-off %1 copy-until-empty queue) agents))
    (apply await agents)))
